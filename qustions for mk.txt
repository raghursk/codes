 1 ) In array of integers as input from the user and finds the second smallest index of an element in the array. However, your program should have a time complexity of O(n), where n is the size of the array, and it should not use any sorting algorithms.
2 ) Is it possible to change the size of an array once it's declared ?
3 ) In string  input is abcd :-- output wellbe bcda--cdab-dabc using 
4 ) what happens if you attempt to perfroms artimatic opt on null opinter ?
5) wrt a program generates two random numbers and a random operation (addition, subtraction, multiplication, or division) and asks the user to solve the expression. It then checks if the user's answer is correct and provides feedback accordingly. 
6) what is deffrence btw bitwise(~) and log(NOT)
   #include <stdio.h>
    int main() {
    int x = 5;
    int bitwise_complement_x = ~x;
    printf("Bitwise complement of %d: %d\n", x, bitwise_complement_x);
    int logical_not_x = !x;
    printf("Logical NOT of %d: %d\n", x, logical_not_x);
    return 0;
}
7 ) sort the array using bitwise opt

#include <stdio.h>
#define size 100
int main(int argc, char *argv[]) {
    int n, revs = 0, rem = 1, sum;

    printf("Enter the number:\n");
    scanf("%d", &n);
    while(n !=0){
    rem = n % 10;
    revs = revs * 10 + rem;
    n /= 10;
}
    printf("%d", revs);
    
    int array[size];
    int temp = revs;
    for(int i=0;i<n;i++)
    {
        int temp=revs;
        revs=array[i];
        array[i]=temp;
        printf("%d",array[i]);
    }
    return 0;
}
#include<stdio.h>
struct school{
    int roll_no;
    long pn;
    char name[100];
    char school_name[100];
};
int main(int argc,char * argv[])
{
 struct school std;
 std.roll_no=1542;
 std.pn=6364259019;
 strcpy(std.name="raghavendra");
 strcpy(std.school_name="adrash vidyalaya rmsa school sedam:\n");
 
 printf("%d\n %ld\n %s\n %s\n",std.roll_no,std.pn,std.name,std.school_name);
}









#include<stdio.h>
struct college
{
    char college_name[100];
    char student_name[100];
    int roll_no;
    int phone_no;
    char student_address[100];
};
int main()
{
    int n;
    printf("the number of the student Details to Entered"\n);
    scanf("%d",&n);
    
    for(int i=0;i<n;i++)
    {
        printf("----------Enter the college_name:------\n");
        printf("%s",strcpy(std.college_name[i]));
        
    }
    
}











#include <stdio.h>
#include <string.h>

struct college
{
    char college_name[100];
    char student_name[100];
    int roll_no;
    int phone_no;
    char student_address[100];
};

int main()
{
    int n;
    printf("Enter the number of students: ");
    scanf("%d", &n);

    struct college std[n]; // Declare an array of structures to store multiple student details

    for (int i = 0; i < n; i++)
    {
        printf("Enter college name for student %d: ", i + 1);
        scanf("%s", std[i].college_name); // Input college name directly into college_name member of the structure
        
        printf("Enter student name for student %d: ", i + 1);
        scanf("%s", std[i].student_name); // Input student name
        
        printf("Enter roll number for student %d: ", i + 1);
        scanf("%d", &std[i].roll_no); // Input roll number
        
        printf("Enter phone number for student %d: ", i + 1);
        scanf("%d", &std[i].phone_no); // Input phone number
        
        printf("Enter address for student %d: ", i + 1);
        scanf("%s", std[i].student_address); // Input address
    }

    // Displaying entered details
    printf("\nEntered Details:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Student %d:\n", i + 1);
        printf("College Name: %s\n", std[i].college_name);
        printf("Student Name: %s\n", std[i].student_name);
        printf("Roll Number: %d\n", std[i].roll_no);
        printf("Phone Number: %d\n", std[i].phone_no);
        printf("Address: %s\n", std[i].student_address);
        printf("\n");
    }

    return 0;
}














